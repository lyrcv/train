import React, { useState, useEffect } from "react";
import { Layout } from "../common/Layout";
import { toast } from "react-toastify";
import "../../assets/css/UsersList.scss";
import { apiUrl } from "../common/http";

export const UsersList = () => {
  // Khai b√°o state ƒë·ªÉ l∆∞u danh s√°ch ng∆∞·ªùi d√πng, ph√¢n trang, v√† c√°c th√¥ng tin t√¨m ki·∫øm
  const [users, setUsers] = useState([]);
  const [pagination, setPagination] = useState({
    currentPage: 1,
    totalPages: 1,
  });
  const [search, setSearch] = useState({
    name: "",
    email: "",
    group: "",
    status: "",
  });

  // H√†m fetch d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ API v·ªõi c√°c tham s·ªë t√¨m ki·∫øm
  const fetchUsers = async (page = 1) => {
    try {
      // G·ª≠i request t·ªõi API ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng theo trang v√† c√°c tham s·ªë t√¨m ki·∫øm
      const response = await fetch(
        `${apiUrl}/users?page=${page}&name=${search.name}&email=${search.email}&group=${search.group}&status=${search.status}`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer $("token")}`,  // C·∫ßn thay th·∫ø ƒë√∫ng v·ªõi token ng∆∞·ªùi d√πng
            "Content-Type": "application/json",
          },
        }
      );

      // Ki·ªÉm tra n·∫øu response kh√¥ng h·ª£p l·ªá
      if (!response.ok) {
        const errorText = await response.text();
        console.error("Error response:", errorText);
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const result = await response.json();  // Chuy·ªÉn d·ªØ li·ªáu tr·∫£ v·ªÅ th√†nh JSON
      setUsers(result.data);  // L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o state
      setPagination({
        currentPage: result.current_page,
        totalPages: result.last_page,  // C·∫≠p nh·∫≠t ph√¢n trang
      });
    } catch (error) {
      console.error("Error fetching users:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng.");  // Th√¥ng b√°o l·ªói n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu
    }
  };

  // S·ª≠ d·ª•ng useEffect ƒë·ªÉ g·ªçi fetchUsers khi th√¥ng tin t√¨m ki·∫øm thay ƒë·ªïi
  useEffect(() => {
    fetchUsers();
  }, [search]);

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi gi√° tr·ªã trong √¥ t√¨m ki·∫øm
  const handleSearchChange = (e) => {
    const { name, value } = e.target;
    setSearch((prevSearch) => ({
      ...prevSearch,
      [name]: value,  // C·∫≠p nh·∫≠t state t√¨m ki·∫øm v·ªõi gi√° tr·ªã m·ªõi
    }));
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "T√¨m ki·∫øm"
  const handleSearchClick = () => {
    fetchUsers(1);  // L·∫•y d·ªØ li·ªáu t·ª´ trang 1 v·ªõi c√°c b·ªô l·ªçc t√¨m ki·∫øm
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "X√≥a t√¨m"
  const handleClearSearch = () => {
    setSearch({ name: "", email: "", group: "", status: "" });  // Reset b·ªô l·ªçc t√¨m ki·∫øm
    fetchUsers(1);  // L·∫•y l·∫°i danh s√°ch ng∆∞·ªùi d√πng t·ª´ trang 1 m√† kh√¥ng c√≥ b·ªô l·ªçc
  };

  return (
    <Layout>
      <main>
        <div className="user-list">
          <div className="user-list__header d-flex justify-content-between align-items-center mb-4">
            <h3 className="title">üìã Danh s√°ch ng∆∞·ªùi d√πng</h3>
            <button className="btn btn-success shadow-sm">
              <i className="fas fa-plus-circle me-2"></i>Th√™m m·ªõi
            </button>
          </div>

          {/* Ph·∫ßn t√¨m ki·∫øm ng∆∞·ªùi d√πng */}
          <div className="row g-3 mb-4 user-list__filter">
            <div className="col-md-3">
              <input
                type="text"
                name="name"
                value={search.name}
                onChange={handleSearchChange}
                className="form-control"
                placeholder="Nh·∫≠p h·ªç t√™n"
              />
            </div>
            <div className="col-md-3">
              <input
                type="email"
                name="email"
                value={search.email}
                onChange={handleSearchChange}
                className="form-control"
                placeholder="Nh·∫≠p email"
              />
            </div>
            <div className="col-md-2">
              <select
                name="group"
                value={search.group}
                onChange={handleSearchChange}
                className="form-select"
              >
                <option value="">Ch·ªçn nh√≥m</option>
                <option value="Admin">Admin</option>
                <option value="Editor">Editor</option>
                <option value="Reviewer">Reviewer</option>
              </select>
            </div>
            <div className="col-md-2">
              <select
                name="status"
                value={search.status}
                onChange={handleSearchChange}
                className="form-select"
              >
                <option value="">Tr·∫°ng th√°i</option>
                <option value="1">ƒêang ho·∫°t ƒë·ªông</option>
                <option value="0">T·∫°m kh√≥a</option>
              </select>
            </div>
            <div className="col-md-2 d-grid gap-2 d-md-block">
              <button className="btn btn-primary me-2" onClick={handleSearchClick}>
                T√¨m ki·∫øm
              </button>
              <button className="btn btn-outline-secondary" onClick={handleClearSearch}>
                X√≥a t√¨m
              </button>
            </div>
          </div>

          {/* B·∫£ng hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng */}
          <div className="table-responsive shadow-sm rounded user-list__table">
            <table className="table table-bordered text-center align-middle table-hover">
              <thead className="table-primary">
                <tr>
                  <th>#</th>
                  <th>H·ªç t√™n</th>
                  <th>Email</th>
                  <th>Nh√≥m</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {users.length > 0 ? (
                  users.map((user) => (
                    <tr key={user.id}>
                      <td>{user.id}</td>
                      <td>{user.name}</td>
                      <td>{user.email}</td>
                      <td>{user.group_role}</td>
                      <td>
                        <span
                          className={`badge ${
                            user.is_active === 1 ? "bg-success" : "bg-secondary"
                          }`}
                        >
                          {user.is_active === 1 ? "ƒêang ho·∫°t ƒë·ªông" : "T·∫°m kh√≥a"}
                        </span>
                      </td>
                      <td>
                        <div className="btn-group">
                          <button className="btn btn-sm btn-warning">
                            <i className="fas fa-edit"></i> S·ª≠a
                          </button>
                          <button className="btn btn-sm btn-danger">
                            <i className="fas fa-trash-alt"></i> X√≥a
                          </button>
                          <button className="btn btn-sm btn-dark">
                            <i className="fas fa-lock"></i> Kh√≥a
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6">Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* Ph√¢n trang */}
          {pagination.totalPages > 1 && (
            <nav className="mt-4">
              <ul className="pagination justify-content-end">
                <li
                  className={`page-item ${
                    pagination.currentPage === 1 ? "disabled" : ""
                  }`}
                >
                  <button
                    className="page-link"
                    onClick={() => fetchUsers(pagination.currentPage - 1)}
                  >
                    ¬´
                  </button>
                </li>
                <li className="page-item active">
                  <button className="page-link">{pagination.currentPage}</button>
                </li>
                <li
                  className={`page-item ${
                    pagination.currentPage === pagination.totalPages
                      ? "disabled"
                      : ""
                  }`}
                >
                  <button
                    className="page-link"
                    onClick={() => fetchUsers(pagination.currentPage + 1)}
                  >
                    ¬ª
                  </button>
                </li>
              </ul>
            </nav>
          )}
        </div>
      </main>
    </Layout>
  );
};

export default UsersList;
